#!/usr/bin/env python3
"""
Auto-trainer ML pour tendance_globale.py
R√©entra√Æne automatiquement le mod√®le ML quand assez de nouvelles donn√©es sont disponibles.
"""

import os
import sqlite3
import json
import logging
from datetime import datetime, timedelta
from typing import Optional

def should_retrain_model(db_path: str = "multi_indicator_macro_history.db", 
                        model_path: str = "models/market_classifier.pkl",
                        min_new_rows: int = 4,   # 4h de nouvelles donn√©es
                        force_days: int = 3) -> tuple[bool, str]:
    """
    D√©termine si le mod√®le doit √™tre r√©entra√Æn√©.
    
    Args:
        db_path: Chemin vers la base SQLite
        model_path: Chemin vers le mod√®le ML
        min_new_rows: Nombre minimum de nouvelles lignes pour d√©clencher un r√©entra√Ænement
        force_days: Force le r√©entra√Ænement apr√®s X jours m√™me sans nouvelles donn√©es
    
    Returns:
        (should_retrain: bool, reason: str)
    """
    
    # 1. V√©rifier si le mod√®le existe
    if not os.path.exists(model_path):
        return True, f"Mod√®le inexistant: {model_path}"
    
    # 2. V√©rifier si la DB existe
    if not os.path.exists(db_path):
        return False, f"Base de donn√©es inexistante: {db_path}"
    
    try:
        # 3. Obtenir l'√¢ge du mod√®le
        model_mtime = datetime.fromtimestamp(os.path.getmtime(model_path))
        model_age_days = (datetime.now() - model_mtime).days
        
        # 4. Compter les nouvelles donn√©es depuis la derni√®re modification du mod√®le
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # Total de lignes
            cursor.execute("SELECT COUNT(*) FROM market_history")
            total_rows = cursor.fetchone()[0]
            
            if total_rows == 0:
                return False, "Aucune donn√©e en base"
            
            # Nouvelles lignes depuis la modification du mod√®le
            model_timestamp = model_mtime.strftime('%Y-%m-%d %H:%M:%S')
            cursor.execute(
                "SELECT COUNT(*) FROM market_history WHERE timestamp > ?",
                (model_timestamp,)
            )
            new_rows = cursor.fetchone()[0]
            
            # 5. D√©cisions de r√©entra√Ænement
            if new_rows >= min_new_rows:
                return True, f"{new_rows} nouvelles lignes (>= {min_new_rows} requis)"
            
            if model_age_days >= force_days:
                return True, f"Mod√®le ancien de {model_age_days} jours (>= {force_days} jours max)"
            
            return False, f"Pas besoin: {new_rows} nouvelles lignes, √¢ge {model_age_days}j"
            
    except Exception as e:
        return False, f"Erreur v√©rification: {e}"


def auto_retrain_if_needed(force: bool = False, 
                          db_path: str = "multi_indicator_macro_history.db",
                          model_path: str = "models/market_classifier.pkl") -> bool:
    """
    R√©entra√Æne automatiquement le mod√®le si n√©cessaire.
    
    Args:
        force: Force le r√©entra√Ænement m√™me si pas n√©cessaire
        db_path: Chemin vers la base
        model_path: Chemin vers le mod√®le
    
    Returns:
        True si r√©entra√Ænement effectu√©, False sinon
    """
    
    print("ü§ñ AUTO-TRAINER ML")
    print("=" * 30)
    
    # V√©rifier si r√©entra√Ænement n√©cessaire
    if not force:
        should_retrain, reason = should_retrain_model(db_path, model_path)
        print(f"√âvaluation: {reason}")
        
        if not should_retrain:
            print("‚úÖ Pas de r√©entra√Ænement n√©cessaire")
            return False
    else:
        print("üöÄ R√©entra√Ænement forc√©")
    
    print("üîÑ Lancement du r√©entra√Ænement...")
    
    try:
        # Import du module ML
        from ml_model import train_model
        
        # Sauvegarder l'ancien mod√®le
        if os.path.exists(model_path):
            backup_path = model_path.replace('.pkl', f'_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.pkl')
            os.rename(model_path, backup_path)
            print(f"üì¶ Ancien mod√®le sauv√©: {backup_path}")
        
        # R√©entra√Æner
        result = train_model(db_path, model_path)
        
        print("‚úÖ R√âENTRA√éNEMENT R√âUSSI !")
        print(f"üìä Donn√©es train: {result['train_size']}")
        print(f"üìä Donn√©es test: {result['test_size']}")
        print(f"üíæ Mod√®le sauv√©: {result['model_path']}")
        print("\nüìà Performance:")
        print(result['report'])
        
        # Log dans un fichier
        log_retrain_event(result, reason if not force else "Forc√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur r√©entra√Ænement: {e}")
        
        # Restaurer l'ancien mod√®le si erreur
        if 'backup_path' in locals() and os.path.exists(backup_path):
            os.rename(backup_path, model_path)
            print(f"üîÑ Ancien mod√®le restaur√©: {model_path}")
        
        return False


def log_retrain_event(result: dict, reason: str):
    """Log les √©v√©nements de r√©entra√Ænement"""
    log_file = "ml_retrain_history.json"
    
    event = {
        "timestamp": datetime.now().isoformat(),
        "reason": reason,
        "train_size": result.get('train_size', 0),
        "test_size": result.get('test_size', 0),
        "model_path": result.get('model_path', ''),
        "success": True
    }
    
    # Charger l'historique existant
    history = []
    if os.path.exists(log_file):
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
        except Exception:
            pass
    
    # Ajouter le nouvel √©v√©nement
    history.append(event)
    
    # Garder seulement les 50 derniers √©v√©nements
    history = history[-50:]
    
    # Sauvegarder
    try:
        with open(log_file, 'w', encoding='utf-8') as f:
            json.dump(history, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"‚ö†Ô∏è Impossible de logger l'√©v√©nement: {e}")


def get_retrain_status() -> dict:
    """Obtient le statut du syst√®me de r√©entra√Ænement"""
    db_path = "multi_indicator_macro_history.db"
    model_path = "models/market_classifier.pkl"
    
    status = {
        "model_exists": os.path.exists(model_path),
        "db_exists": os.path.exists(db_path),
        "should_retrain": False,
        "reason": "",
        "last_retrain": None,
        "total_retrains": 0
    }
    
    if status["model_exists"]:
        status["model_age_hours"] = (datetime.now() - datetime.fromtimestamp(os.path.getmtime(model_path))).total_seconds() / 3600
    
    if status["db_exists"]:
        try:
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM market_history")
                status["total_data_rows"] = cursor.fetchone()[0]
        except Exception:
            status["total_data_rows"] = 0
    
    # V√©rifier si r√©entra√Ænement n√©cessaire
    status["should_retrain"], status["reason"] = should_retrain_model(db_path, model_path)
    
    # Historique des r√©entra√Ænements
    log_file = "ml_retrain_history.json"
    if os.path.exists(log_file):
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
            status["total_retrains"] = len(history)
            if history:
                status["last_retrain"] = history[-1]["timestamp"]
        except Exception:
            pass
    
    return status


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Auto-trainer ML pour tendance_globale.py")
    parser.add_argument("--force", action="store_true", help="Force le r√©entra√Ænement")
    parser.add_argument("--status", action="store_true", help="Affiche le statut")
    parser.add_argument("--check", action="store_true", help="V√©rifie seulement si r√©entra√Ænement n√©cessaire")
    
    args = parser.parse_args()
    
    if args.status:
        status = get_retrain_status()
        print("üìä STATUT AUTO-TRAINER:")
        print("-" * 25)
        print(f"Mod√®le existe: {'‚úÖ' if status['model_exists'] else '‚ùå'}")
        print(f"Base donn√©es: {'‚úÖ' if status['db_exists'] else '‚ùå'}")
        if status['model_exists']:
            print(f"√Çge mod√®le: {status['model_age_hours']:.1f}h")
        if status['db_exists']:
            print(f"Lignes donn√©es: {status['total_data_rows']}")
        print(f"R√©entra√Ænements: {status['total_retrains']}")
        if status['last_retrain']:
            print(f"Dernier: {status['last_retrain']}")
        print(f"Besoin r√©entra√Ænement: {'‚úÖ' if status['should_retrain'] else '‚ùå'}")
        print(f"Raison: {status['reason']}")
        
    elif args.check:
        should, reason = should_retrain_model()
        print(f"R√©entra√Ænement n√©cessaire: {'‚úÖ' if should else '‚ùå'}")
        print(f"Raison: {reason}")
    else:
        auto_retrain_if_needed(force=args.force)